user www-data;
worker_processes auto;
pid /run/nginx.pid;
worker_rlimit_nofile 12288;

events {
    worker_connections 12288;
    # multi_accept on;
}

http {

    ##
    # Basic Settings
    ##

    sendfile on;
    tcp_nopush on;
    tcp_nodelay off;
    keepalive_timeout 20;
    types_hash_max_size 2048;
    server_tokens off;

    server_names_hash_bucket_size 64;
    # server_name_in_redirect off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ##
    # Logging Settings
    ##

    error_log /var/log/nginx/error.log;
    access_log off;

    ##
    # Gzip Settings
    ##
    gzip on;

    # Enable compression both for HTTP/1.0 and HTTP/1.1 (required for CloudFront).
    gzip_http_version  1.0;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level    5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length    256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;

    # Compress all output labeled with one of the following MIME-types.
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/plain
        text/x-component;

    proxy_cache_path  /srv/cache levels=1:2 keys_zone=minotar:1000m max_size=10000m inactive=100m;
    proxy_temp_path /srv/tmp;
    proxy_buffer_size 8192;

    server {
        listen 443 default ssl;
        ssl on;
        ssl_certificate /srv/ssl/bundle.crt;
        ssl_certificate_key /srv/ssl/server.key;

        server_name minotar.net;
        access_log  off;
        error_log /var/log/nginx/error.log;

        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Minotar-Server' $hostname;

        location / {
            proxy_pass http://127.0.0.1:9999;

            proxy_cache minotar;
            proxy_cache_valid  200 302  60m;
            proxy_cache_valid  404      1m;
            proxy_read_timeout 6s;
            proxy_cache_use_stale timeout;
            proxy_max_temp_file_size 1M;

            proxy_http_version 1.1;
            proxy_next_upstream error timeout http_500 http_503 http_504;

            proxy_set_header        Host            minotar.net;
            proxy_set_header        X-Real-IP       $remote_addr;
            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
    server {
        listen 443;
        ssl on;
        ssl_certificate /srv/ssl/bundle.crt;
        ssl_certificate_key /srv/ssl/server.key;

        server_name www.minotar.net *.minotar.net;

        rewrite ^ https://minotar.net$request_uri? permanent;
    }
    server {
        listen 80;
        server_name www.minotar.net minotar.net;

        rewrite ^ https://minotar.net$request_uri? permanent;
    }
}

